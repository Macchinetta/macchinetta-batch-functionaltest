<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
             http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
             http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <import resource="classpath:META-INF/spring/job-base-context.xml"/>

    <context:component-scan base-package="jp.co.ntt.fw.macchinetta.batch.functionaltest.app.common"/>
    <context:component-scan base-package="jp.co.ntt.fw.macchinetta.batch.functionaltest.ch05.fileaccess.module"/>
    <mybatis:scan
            base-package="jp.co.ntt.fw.macchinetta.batch.functionaltest.app.repository.plan"
            factory-ref="jobSqlSessionFactory"/>

    <bean id="footerReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step"
          p:resource="file:#{jobParameters['footerInputFile']}">
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
                          p:names="name,value"/>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
                          p:targetType="jp.co.ntt.fw.macchinetta.batch.functionaltest.ch05.fileaccess.model.plan.SalesPlanDetailFooter"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="dataReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step"
          p:resource="file:#{jobParameters['dataInputFile']}">
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer"
                          p:names="branchId,year,month,customerId,amount"/>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper"
                          p:targetType="jp.co.ntt.fw.macchinetta.batch.functionaltest.app.model.plan.SalesPlanDetail"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="writer" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step"
          p:footerCallback-ref="writeFooterFlatFileFooterCallback"
          p:resource="file:#{jobParameters['outputFile']}">
        <property name="lineAggregator">
            <bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
                <property name="fieldExtractor">
                    <bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor"
                          p:names="branchId,year,month,customerId,amount"/>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="readFooterTasklet"
          class="jp.co.ntt.fw.macchinetta.batch.functionaltest.ch05.fileaccess.module.ReadFooterTasklet" scope="job"/>

    <batch:job id="jobReadAndWriteCsvWithFooter" job-repository="jobRepository">
        <batch:step id="jobReadAndWriteCsvWithFooter.step01" next="jobReadAndWriteCsvWithFooter.step02">
            <batch:tasklet ref="readFooterTasklet" transaction-manager="jobTransactionManager"/>
        </batch:step>
        <batch:step id="jobReadAndWriteCsvWithFooter.step02">
            <batch:tasklet transaction-manager="jobTransactionManager">
                <batch:chunk reader="dataReader"
                             writer="writer" commit-interval="10"/>
                <batch:listeners>
                    <batch:listener ref="loggingItemReaderListener"/>
                </batch:listeners>
            </batch:tasklet>
        </batch:step>
        <batch:listeners>
            <batch:listener ref="jobExecutionLoggingListener"/>
            <batch:listener ref="readFooterTasklet"/>
            <batch:listener ref="writeFooterFlatFileFooterCallback"/>
        </batch:listeners>
    </batch:job>

</beans>
